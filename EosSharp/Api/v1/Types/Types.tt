<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import   namespace="System.Globalization" #>
<#@ output   extension=".cs" #>
<#

var types = new Type[] {
	//GetInfo Types
	new Type() {
		Name = "GetInfoResponse",
		Fields = new Field[] {
			new Field() { Name = "server_version", Type = "string" },
			new Field() { Name = "chain_id", Type = "string" },
			new Field() { Name = "head_block_num", Type = "string" },
			new Field() { Name = "last_irreversible_block_num", Type = "string" },
			new Field() { Name = "last_irreversible_block_id", Type = "string" },
			new Field() { Name = "head_block_id", Type = "string" },
			new Field() { Name = "head_block_time", Type = "string" },
			new Field() { Name = "head_block_producer", Type = "string" },
			new Field() { Name = "virtual_block_cpu_limit", Type = "string" },
			new Field() { Name = "virtual_block_net_limit", Type = "string" },
			new Field() { Name = "block_cpu_limit", Type = "string" },
			new Field() { Name = "block_net_limit", Type = "string" }
		}				
	},
	//GetAccount Types
	new Type() {
		Name = "GetAccountRequest",
		Fields = new Field[] {
			new Field() { Name = "account_name", Type = "string" }
		}			
	},
	new Type() {
		Name = "GetAccountResponse",
		Fields = new Field[] {
			
		}			
	},
	//GetCode Types
	new Type() {
		Name = "GetCodeRequest",
		Fields = new Field[] {
			new Field() { Name = "account_name", Type = "string" },
			new Field() { Name = "code_as_wasm", Type = "string" }
		}
	},
	new Type() {
		Name = "GetCodeResponse",
		Fields = new Field[] {
			new Field() { Name = "account_name", Type = "string" },
			new Field() { Name = "wast", Type = "string" },
			new Field() { Name = "wasm", Type = "string" },
			new Field() { Name = "code_hash", Type = "string" },
			new Field() { Name = "abi", Type = "string" }
		}			
	}
};

#>
using Newtonsoft.Json;

namespace EosSharp.Api.v1.Types
{
<# foreach (var type in types) { #>
    public class <#= type.Name #>
    {
<# foreach (var field in type.Fields) { #>
		[JsonProperty("<#= field.Name #>")]   
		public <#= field.Type #> <#= ConvertPascalCase(field.Name) #> { get; set; }
<# } #>
    }

<# } #>
}

<#+
	public class Field {
        public string Name { get; set; }
        public string Type { get; set; }
    }

	public class Type {
		public string Name { get; set; }
		public Field[] Fields { get; set; }
	}

    public string ConvertPascalCase(string s)
    {
		var result = s.ToLower().Replace("_", " ");
		TextInfo info = CultureInfo.CurrentCulture.TextInfo;
		result = info.ToTitleCase(result).Replace(" ", string.Empty);
		return result;
    }
#>