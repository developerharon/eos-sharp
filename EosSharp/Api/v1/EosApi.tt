<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import   namespace="System.Globalization" #>
<#@ include  file="EosApiDefinitions.t4" #>  
<#@ output   extension=".cs" #>
// Auto Generated, do not edit.
using EosSharp.Helpers;
using System.Threading.Tasks;

namespace EosSharp.Api.v1
{
    public class EosApi
    { 
        public EosConfigurator Config { get; set; }
        public EosApi(EosConfigurator config)
        {
            Config = config;
        }

<# foreach (var method in apiMethods) { #>
<#   if(method.Request == null) { #>
		public async Task<<#= ConvertPascalCase(method.Name) #>Response> <#= ConvertPascalCase(method.Name) #>()
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
            return await HttpHelper.GetJsonAsync<<#= ConvertPascalCase(method.Name) #>Response>(url);
        }
<#   } else { #>
		public async Task<<#= ConvertPascalCase(method.Name) #>Response> <#= ConvertPascalCase(method.Name) #>(<#= ConvertPascalCase(method.Name) #>Request data)
        {
            var url = string.Format("{0}/v1/<#= method.Module #>/<#= method.Name #>", Config.HttpEndpoint);
            return await HttpHelper.PostJsonAsync<<#= ConvertPascalCase(method.Name) #>Response>(url, data);
        }
<#   } #>
<# } #>
    }
}
